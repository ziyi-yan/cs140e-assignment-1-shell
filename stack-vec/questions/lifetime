Q: The compiler would reject the following StackVec declaration:

struct StackVec<'a, T> { buffer: &'a mut [T], len: usize }
If we add an 'a bound to T, however, the compiler is satisifed:

struct StackVec<'a, T: 'a> { buffer: &'a mut [T], len: usize }
Why is the bound required? What could go wrong if that bound wasnâ€™t enforced by Rust?

A: It is `lifetime bound`, which is used to make sure the reference inside the type `T` will not outlive
the lifetime `'a`.
